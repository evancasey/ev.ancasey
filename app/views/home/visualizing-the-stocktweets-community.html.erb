<div class="page">
  
  <div class="headline">Visualizing the Stocktweets Community</div>

  <div class="project"> 
    
    <div class="stock">
      <div id="view_selection" class="btn-group">
        <a href="#" id="follow" class="btn">Followers</a>
        <a href="#" id="retweet" class="btn">Retweets</a>
        <a href="#" id="mention" class="btn">Mentions</a>
      </div>
      
      <div id="vis"></div>

      <div class="desc">
        A visualization of different user influence measures across the top 1% most influential users in the <a href="http://stocktwits.com/">stocktwits</a> community (users who tweet out stock related messages using the $TICKER tag). Data collected from the Twitter Streaming API between 4/22/13 and 4/29/13. <br><br> You can mouse over each node for more information on a particular user. The bubble size indicates the normalized influence measure for each user, and the bubble color indicates the source of the tweet. You can also drag and drop the nodes and watch the collision detection. Mousing over a node pauses the gravity engine for a particular node.<br><br>Built using <a href="http://d3js.org">D3</a>.
      </br></br>
        <b>Links:</b></br>
        <a href="https://github.com/evancasey/stockstream">Github Repo</a></br></br>
        <b>Technologies:</b></br>
        Python, SQLalchemy, d3.js, jQuery, Twitter API</br></br>

      </div>
    </div>

        <script src="http://d3js.org/d3.v2.min.js?2.9.1"></script>
        <script type="text/javascript">
          //load in data
          d3.csv("../assets/data_trunc.csv", function(dataRows) {

            //initialize lists to store user data
            var username = [],
                followers = [],
                retweets = [],
                mentions = [],
                source = [],
                color_index = [],
                user_num = -1;

            //fill the lists with data from csv
            dataRows.forEach(function(r) {
              //add the users
              username.push(r.username);
              source.push(r.source);

              //parse the values to integers
              var follow_count = parseInt(r.followers),
                  retweet_count = parseInt(r.retweets),
                  mention_count = parseInt(r.mentions);

              //add to the list
              followers.push(follow_count);
              retweets.push(retweet_count);
              mentions.push(mention_count);

              //add to color index
              switch(r.source) {
                case "web":
                  color_index.push(0);
                  break;
                case "SocialFlow":
                  color_index.push(1);
                  break;
                case "TweetDeck":
                  color_index.push(2);
                  break;
                case "Business Insider":
                  color_index.push(3);
                  break;
                case "StockTwits Web":
                  color_index.push(4);
                  break;
                case "Twitter for Android":
                  color_index.push(5);
                  break;
                case "HootSuite":
                  color_index.push(6);
                  break;
                case "twitterfeed":
                  color_index.push(7);
                  break;
                case "Twitter for iPhone":
                  color_index.push(8);
                  break;
                case "Seeking Alpha":
                  color_index.push(9);
                  break;
                case "Janetter":
                  color_index.push(10);
                  break;
                case "Sprout Social":
                  color_index.push(11);
                  break;
                case "Mobile Web (M2)":
                  color_index.push(12);
                  break;
                case "Tweet Button":
                  color_index.push(13);   
                  break;
                case "Safari on iOS":
                  color_index.push(14);   
                  break;
                case "NASDAQ.com":
                  color_index.push(15);   
                  break;
                case "TradingView":
                  color_index.push(16);   
                  break;
                case "RiskReversal":
                  color_index.push(17);   
                  break;
                case "bitly":
                  color_index.push(18);  
                  break;
                default:
                  color_index.push(19);        
              }
            });

            //define table margins
            var margin = {top: 1, right: 1, bottom: 6, left: 1},
                width = 600 - margin.left - margin.right,
                height = 300 - margin.top - margin.bottom;

            //create the svg
            var svg = d3.select("#vis").append("svg:svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
              .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var user_num = -1;

            //define node fields    
            var n = username.length - 1, //number of users
                m = 1000, 
                padding = 6,
                radius = d3.scale.sqrt().range([1, 2]),
                color = d3.scale.category20c(),
                gravity = -10,
                friction = .5,
                charge = -10;

            //load dynamic node data    
            var nodes = d3.range(n).map(function() {
              user_num++; //increment by one to access next user
              return {
                radius: radius((followers[user_num])/1800),
                username: username[user_num],
                source: source[user_num],
                color: color(color_index[user_num])
              };
            });

            $(function(){
              showGraph();
            })

            function showGraph() {

              //start the visualization
              var force = d3.layout.force()
                  .nodes(nodes)
                  .size([width, height])
                  .linkDistance(400)
                  .charge(charge)
                  .friction(friction)
                  .on("tick", tick)
                  .start();

              //create each circle
              var circle = svg.selectAll("circle")
                  .data(nodes)
                .enter().append("svg:circle")
                  .attr("r", function(d) { return d.radius; })
                  .attr("class","node")
                  .attr("username", function(d) {return d.username; })
                  .attr("source", function(d) {return d.source; })
                  .style("fill", function(d) { return d.color; })
                  .call(force.drag);
                  

              //add tipsy tooltip
              $(".node").tipsy({html:true,
                                fade: true,
                                gravity: 'e',
                                title: function () {
                                  var name = $(this).attr("username");
                                  var source = $(this).attr("source");
                                return '<a href=\"http://twitter.com/'+ name +'\">' + name + '</a>' +
                                "<br>" + source;}}
                              ); 

              //calls cluster, updates on movement
              function tick(e) {
                circle
                    .each(collide(.075))
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }

              //resolves collisions between d and all other circles.
              function collide(alpha) {
                var quadtree = d3.geom.quadtree(nodes);
                return function(d) {
                  var r = d.radius + radius.domain()[1] + padding,
                      nx1 = d.x - r,
                      nx2 = d.x + r,
                      ny1 = d.y - r,
                      ny2 = d.y + r;
                  quadtree.visit(function(quad, x1, y1, x2, y2) {
                    if (quad.point && (quad.point !== d)) {
                      var x = d.x - quad.point.x,
                          y = d.y - quad.point.y,
                          l = Math.sqrt(x * x + y * y),
                          r = d.radius + quad.point.radius + (d.color !== quad.point.color) * padding;
                      if (l < r) {
                        l = (l - r) / l * alpha;
                        d.x -= x *= l;
                        d.y -= y *= l;
                        quad.point.x += x;
                        quad.point.y += y;
                      }
                    }
                    return x1 > nx2
                        || x2 < nx1
                        || y1 > ny2
                        || y2 < ny1;
                  });
                };
              }

               d3.select("#follow")
              .on("click", function(){
                loadFollow();
                showGraph();
              })
              
               d3.select("#retweet")
              .on("click", function(){
                loadRetweet();
                showGraph();
              })

               d3.select("#mention")
              .on("click", function(){
                loadMention();
                showGraph();
              })

            }

            function loadFollow() {

              //reset user_num
              user_num = -1;

              //update node values with new data
              nodes = d3.range(n).map(function() {
                user_num++; //increment by one to access next user
                return {
                  radius: radius((followers[user_num])/1800),
                  username: username[user_num],
                  source: source[user_num],
                  color: color(color_index[user_num])
                };
              });

             svg.selectAll("circle")
              .data(nodes)
              .attr("r", function(d) { return d.radius; })
              .attr("class","node")
              .attr("username", function(d) {return d.username; })
              .attr("source", function(d) {return d.source; })
              .style("fill", function(d) { return d.color; });

            };

            function loadRetweet () {

              //reset user_num
              user_num = -1;

              //update node values with new data
              nodes = d3.range(n).map(function() {
                user_num++; //increment by one to access next user
                return {
                  radius: radius(retweets[user_num]*2),
                  username: username[user_num],
                  source: source[user_num],
                  color: color(color_index[user_num])
                };
              });

             svg.selectAll("circle")
              .data(nodes)
              .attr("r", function(d) { return d.radius; })
              .attr("class","node")
              .attr("username", function(d) {return d.username; })
              .attr("source", function(d) {return d.source; })
              .style("fill", function(d) { return d.color; });
            }  

            function loadMention () {

              //reset user_num
              user_num = -1;

              //update node values with new data
              nodes = d3.range(n).map(function() {
                user_num++; //increment by one to access next user
                return {
                  radius: radius(mentions[user_num]*3),
                  username: username[user_num],
                  source: source[user_num],
                  color: color(color_index[user_num])
                };
              });


             svg.selectAll("circle")
              .data(nodes)
              .attr("r", function(d) { return d.radius; })
              .attr("class","node")
              .attr("username", function(d) {return d.username; })
              .attr("source", function(d) {return d.source; })
              .style("fill", function(d) { return d.color; });
            }  

            
          });


        </script>
        <script type="text/javascript">
          // tipsy, facebook style tooltips for jquery
          // version 1.0.0a
          // (c) 2008-2010 jason frame [jason@onehackoranother.com]
          // released under the MIT license

          (function($) {
              
              function maybeCall(thing, ctx) {
                  return (typeof thing == 'function') ? (thing.call(ctx)) : thing;
              }
              
              function Tipsy(element, options) {
                  this.$element = $(element);
                  this.options = options;
                  this.enabled = true;
                  this.fixTitle();
              }
              
              Tipsy.prototype = {
                  show: function() {
                      var title = this.getTitle();
                      if (title && this.enabled) {
                          var $tip = this.tip();
                          
                          $tip.find('.tipsy-inner')[this.options.html ? 'html' : 'text'](title);
                          $tip[0].className = 'tipsy'; // reset classname in case of dynamic gravity
                          $tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).prependTo(document.body);
                          
                          var pos = $.extend({}, this.$element.offset(), {
                              width: this.$element[0].offsetWidth || 0,
                              height: this.$element[0].offsetHeight || 0
                          });

                          if (typeof this.$element[0].nearestViewportElement == 'object') {
                              // SVG
                              var el = this.$element[0];
                              var rect = el.getBoundingClientRect();
                              pos.width = rect.width;
                              pos.height = rect.height;
                          }

                          
                          var actualWidth = $tip[0].offsetWidth,
                              actualHeight = $tip[0].offsetHeight,
                              gravity = maybeCall(this.options.gravity, this.$element[0]);
                          
                          var tp;
                          switch (gravity.charAt(0)) {
                              case 'n':
                                  tp = {top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
                                  break;
                              case 's':
                                  tp = {top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
                                  break;
                              case 'e':
                                  tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
                                  break;
                              case 'w':
                                  tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
                                  break;
                          }
                          
                          if (gravity.length == 2) {
                              if (gravity.charAt(1) == 'w') {
                                  tp.left = pos.left + pos.width / 2 - 15;
                              } else {
                                  tp.left = pos.left + pos.width / 2 - actualWidth + 15;
                              }
                          }
                          
                          $tip.css(tp).addClass('tipsy-' + gravity);
                          $tip.find('.tipsy-arrow')[0].className = 'tipsy-arrow tipsy-arrow-' + gravity.charAt(0);
                          if (this.options.className) {
                              $tip.addClass(maybeCall(this.options.className, this.$element[0]));
                          }
                          
                          if (this.options.fade) {
                              $tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'}).animate({opacity: this.options.opacity});
                          } else {
                              $tip.css({visibility: 'visible', opacity: this.options.opacity});
                          }

                          var t = this;
                          var set_hovered  = function(set_hover){
                              return function(){
                                  t.$tip.stop();
                                  t.tipHovered = set_hover;
                                  if (!set_hover){
                                      if (t.options.delayOut === 0) {
                                          t.hide();
                                      } else {
                                          setTimeout(function() { 
                                              if (t.hoverState == 'out') t.hide(); }, t.options.delayOut);
                                      }
                                  }
                              };
                          };
                         $tip.hover(set_hovered(true), set_hovered(false));
                      }
                  },
                  
                  hide: function() {
                      if (this.options.fade) {
                          this.tip().stop().fadeOut(function() { $(this).remove(); });
                      } else {
                          this.tip().remove();
                      }
                  },
                  
                  fixTitle: function() {
                      var $e = this.$element;
                      
                      if ($e.attr('title') || typeof($e.attr('original-title')) != 'string') {
                          $e.attr('original-title', $e.attr('title') || '').removeAttr('title');
                      }
                      if (typeof $e.context.nearestViewportElement == 'object'){                                                        
                          if ($e.children('title').length){
                              $e.append('<original-title>' + ($e.children('title').text() || '') + '</original-title>')
                                  .children('title').remove();
                          }
                      }
                  },
                  
                  getTitle: function() {
                      
                      var title, $e = this.$element, o = this.options;
                      this.fixTitle();

                      if (typeof o.title == 'string') {
                          var title_name = o.title == 'title' ? 'original-title' : o.title;
                          if ($e.children(title_name).length){
                              title = $e.children(title_name).html();
                          } else{
                              title = $e.attr(title_name);
                          }
                          
                      } else if (typeof o.title == 'function') {
                          title = o.title.call($e[0]);
                      }
                      title = ('' + title).replace(/(^\s*|\s*$)/, "");
                      return title || o.fallback;
                  },
                  
                  tip: function() {
                      if (!this.$tip) {
                          this.$tip = $('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
                      }
                      return this.$tip;
                  },
                  
                  validate: function() {
                      if (!this.$element[0].parentNode) {
                          this.hide();
                          this.$element = null;
                          this.options = null;
                      }
                  },
                  
                  enable: function() { this.enabled = true; },
                  disable: function() { this.enabled = false; },
                  toggleEnabled: function() { this.enabled = !this.enabled; }
              };
              
              $.fn.tipsy = function(options) {
                  
                  if (options === true) {
                      return this.data('tipsy');
                  } else if (typeof options == 'string') {
                      var tipsy = this.data('tipsy');
                      if (tipsy) tipsy[options]();
                      return this;
                  }
                  
                  options = $.extend({}, $.fn.tipsy.defaults, options);

                  if (options.hoverlock && options.delayOut === 0) {
                  options.delayOut = 100;
              }
                  
                  function get(ele) {
                      var tipsy = $.data(ele, 'tipsy');
                      if (!tipsy) {
                          tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                          $.data(ele, 'tipsy', tipsy);
                      }
                      return tipsy;
                  }
                  
                  function enter() {
                      var tipsy = get(this);
                      tipsy.hoverState = 'in';
                      if (options.delayIn === 0) {
                          tipsy.show();
                      } else {
                          tipsy.fixTitle();
                          setTimeout(function() { if (tipsy.hoverState == 'in') tipsy.show(); }, options.delayIn);
                      }
                  }
                  
                  function leave() {
                      var tipsy = get(this);
                      tipsy.hoverState = 'out';
                      if (options.delayOut === 0) {
                          tipsy.hide();
                      } else {
                          var to = function() {
                              if (!tipsy.tipHovered || !options.hoverlock){
                                  if (tipsy.hoverState == 'out') tipsy.hide(); 
                              }
                          };
                          setTimeout(to, options.delayOut);
                      }    
                  }

                  if (options.trigger != 'manual') {
                      var binder = options.live ? 'live' : 'bind',
                          eventIn = options.trigger == 'hover' ? 'mouseenter' : 'focus',
                          eventOut = options.trigger == 'hover' ? 'mouseleave' : 'blur';
                      this[binder](eventIn, enter)[binder](eventOut, leave);
                  }
                  
                  return this;
                  
              };
              
              $.fn.tipsy.defaults = {
                  className: null,
                  delayIn: 0,
                  delayOut: 0,
                  fade: false,
                  fallback: '',
                  gravity: 'n',
                  html: false,
                  live: false,
                  offset: 0,
                  opacity: 0.8,
                  title: 'title',
                  trigger: 'hover',
                  hoverlock: false
              };
              
              // Overwrite this method to provide options on a per-element basis.
              // For example, you could store the gravity in a 'tipsy-gravity' attribute:
              // return $.extend({}, options, {gravity: $(ele).attr('tipsy-gravity') || 'n' });
              // (remember - do not modify 'options' in place!)
              $.fn.tipsy.elementOptions = function(ele, options) {
                  return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
              };
              
              $.fn.tipsy.autoNS = function() {
                  return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
              };
              
              $.fn.tipsy.autoWE = function() {
                  return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
              };
              
              /**
               * yields a closure of the supplied parameters, producing a function that takes
               * no arguments and is suitable for use as an autogravity function like so:
               *
               * @param margin (int) - distance from the viewable region edge that an
               *        element should be before setting its tooltip's gravity to be away
               *        from that edge.
               * @param prefer (string, e.g. 'n', 'sw', 'w') - the direction to prefer
               *        if there are no viewable region edges effecting the tooltip's
               *        gravity. It will try to vary from this minimally, for example,
               *        if 'sw' is preferred and an element is near the right viewable 
               *        region edge, but not the top edge, it will set the gravity for
               *        that element's tooltip to be 'se', preserving the southern
               *        component.
               */
               $.fn.tipsy.autoBounds = function(margin, prefer) {
                  return function() {
                      var dir = {ns: prefer[0], ew: (prefer.length > 1 ? prefer[1] : false)},
                          boundTop = $(document).scrollTop() + margin,
                          boundLeft = $(document).scrollLeft() + margin,
                          $this = $(this);

                      if ($this.offset().top < boundTop) dir.ns = 'n';
                      if ($this.offset().left < boundLeft) dir.ew = 'w';
                      if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = 'e';
                      if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = 's';

                      return dir.ns + (dir.ew ? dir.ew : '');
                  };
              };
          })(jQuery);

        </script>

  </div>


  

</div>

